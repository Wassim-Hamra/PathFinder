<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/static/js/algorithms.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/static/js/algorithms.js" />
              <option name="originalContent" value="// Algorithm execution and visualization functionality for real map routing&#10;class AlgorithmManager {&#10;    constructor() {&#10;        this.currentResults = null;&#10;        this.noControls = false; // flag if controls are absent&#10;&#10;        this.nodeHistory = { dijkstra: [], astar: [] }; // store last 3 node counts per algorithm&#10;        this.maxHistory = 3;&#10;&#10;        this.setupEventListeners();&#10;    }&#10;&#10;    setupEventListeners() {&#10;        // Find path button (may not exist in fullscreen minimal mode)&#10;        const findBtn = document.getElementById('findPathBtn');&#10;        if (findBtn) {&#10;            findBtn.addEventListener('click', () =&gt; {&#10;                this.findPath();&#10;            });&#10;        } else {&#10;            this.noControls = true;&#10;        }&#10;&#10;        // Clear selection button&#10;        const clearBtn = document.getElementById('clearSelectionBtn');&#10;        if (clearBtn) {&#10;            clearBtn.addEventListener('click', () =&gt; {&#10;                if (window.leafletMap) {&#10;                    window.leafletMap.clearSelection();&#10;                    window.leafletMap.updateUI();&#10;                }&#10;            });&#10;        }&#10;&#10;        // Complexity / performance buttons&#10;        const complexityBtn = document.getElementById('showComplexityBtn');&#10;        const performanceBtn = document.getElementById('showPerformanceBtn');&#10;        if (complexityBtn) {&#10;            complexityBtn.addEventListener('click', () =&gt; {&#10;                this.showComplexityAnalysis();&#10;            });&#10;        }&#10;        if (performanceBtn) {&#10;            performanceBtn.addEventListener('click', () =&gt; {&#10;                this.showPerformanceMetrics();&#10;            });&#10;        }&#10;    }&#10;&#10;    async findPath() {&#10;        if (!window.leafletMap || !window.leafletMap.isInitialized) {&#10;            this.showError('Map is still loading. Please wait a moment and try again.');&#10;            return;&#10;        }&#10;&#10;        if (!window.leafletMap.selectedStart || !window.leafletMap.selectedEnd) {&#10;            this.showError('Please select start and end points by clicking on the map');&#10;            return;&#10;        }&#10;&#10;        this.showLoading(true);&#10;&#10;        try {&#10;            const algoSelect = document.getElementById('algorithmSelect');&#10;            const algorithm = algoSelect ? algoSelect.value : 'dijkstra';&#10;&#10;            if (algorithm === 'compare') {&#10;                await this.compareRoutes();&#10;            } else {&#10;                await this.findSingleRoute(algorithm);&#10;            }&#10;&#10;        } catch (error) {&#10;            console.error('Error finding path:', error);&#10;            this.showError('Failed to find route: ' + error.message);&#10;        } finally {&#10;            this.showLoading(false);&#10;        }&#10;    }&#10;&#10;    async findSingleRoute(algorithm) {&#10;        const requestData = {&#10;            start: window.leafletMap.selectedStart,&#10;            end: window.leafletMap.selectedEnd,&#10;            algorithm: algorithm,&#10;            use_real_streets: true&#10;        };&#10;&#10;        const response = await fetch('/api/find-route', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify(requestData)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (result.error) {&#10;            throw new Error(result.error);&#10;        }&#10;&#10;        this.currentResults = result;&#10;&#10;        // Record node exploration history&#10;        this.recordNodeHistory(result.algorithm, result.nodes_explored || (result.performance_analysis?.complexity_analysis?.nodes_explored));&#10;        this.updateMiniComplexityChart();&#10;&#10;        // Display the route on the map&#10;        if (window.leafletMap &amp;&amp; window.leafletMap.displayRoute) {&#10;            window.leafletMap.displayRoute(result);&#10;        }&#10;&#10;        // Update performance display with real data&#10;        this.updatePerformanceDisplay(result);&#10;&#10;        // Show success message with route details&#10;        this.showSuccess(&#10;            `Route found using ${result.algorithm}! ` +&#10;            `Distance: ${result.total_distance} km, ` +&#10;            `Duration: ${result.duration_minutes} minutes`&#10;        );&#10;    }&#10;&#10;    async compareRoutes() {&#10;        const requestData = {&#10;            start: window.leafletMap.selectedStart,&#10;            end: window.leafletMap.selectedEnd,&#10;            algorithm: 'compare',&#10;            use_real_streets: true&#10;        };&#10;&#10;        const response = await fetch('/api/find-route', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify(requestData)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (result.error) {&#10;            throw new Error(result.error);&#10;        }&#10;&#10;        this.currentResults = result;&#10;&#10;        // Record both algorithms' node counts&#10;        this.recordNodeHistory('dijkstra', result.dijkstra.nodes_explored || (result.dijkstra.performance_analysis?.complexity_analysis?.nodes_explored));&#10;        this.recordNodeHistory('astar', result.astar.nodes_explored || (result.astar.performance_analysis?.complexity_analysis?.nodes_explored));&#10;        this.updateMiniComplexityChart();&#10;&#10;        // Display comparison routes on the map&#10;        if (window.leafletMap &amp;&amp; window.leafletMap.displayComparison) {&#10;            window.leafletMap.displayComparison(result.dijkstra, result.astar);&#10;        }&#10;&#10;        // Update performance display with comparison data&#10;        this.updateComparisonPerformance(result);&#10;&#10;        // Show comparison details&#10;        const comparison = result.comparison;&#10;        const dijkstra = result.dijkstra;&#10;        const astar = result.astar;&#10;&#10;        let message = `Route comparison completed!&lt;br&gt;`;&#10;        message += `&lt;strong&gt;Dijkstra:&lt;/strong&gt; ${dijkstra.total_distance}km, ${dijkstra.duration_minutes}min, ${dijkstra.nodes_explored} nodes&lt;br&gt;`;&#10;        message += `&lt;strong&gt;A*:&lt;/strong&gt; ${astar.total_distance}km, ${astar.duration_minutes}min, ${astar.nodes_explored} nodes&lt;br&gt;`;&#10;        message += `&lt;strong&gt;Faster algorithm:&lt;/strong&gt; ${comparison.faster_algorithm}&lt;br&gt;`;&#10;        message += `&lt;strong&gt;Shorter path:&lt;/strong&gt; ${comparison.shorter_path}`;&#10;&#10;        this.showSuccess(message);&#10;    }&#10;&#10;    showLoading(show) {&#10;        const btn = document.getElementById('findPathBtn');&#10;        if (show) {&#10;            btn.innerHTML = '&lt;span class=&quot;spinner-border spinner-border-sm me-2&quot;&gt;&lt;/span&gt;Computing Route...';&#10;            btn.disabled = true;&#10;        } else {&#10;            btn.innerHTML = 'Find Route';&#10;            btn.disabled = !(window.leafletMap &amp;&amp; window.leafletMap.hasValidSelection());&#10;        }&#10;    }&#10;&#10;    showSuccess(message) {&#10;        this.showAlert(message, 'success');&#10;    }&#10;&#10;    showError(message) {&#10;        this.showAlert(message, 'danger');&#10;    }&#10;&#10;    showAlert(message, type) {&#10;        // Remove existing alerts&#10;        const existingAlerts = document.querySelectorAll('.alert-custom');&#10;        existingAlerts.forEach(alert =&gt; alert.remove());&#10;&#10;        // Create new alert&#10;        const alertDiv = document.createElement('div');&#10;        alertDiv.className = `alert alert-${type} alert-dismissible fade show alert-custom mt-3`;&#10;        alertDiv.innerHTML = `&#10;            ${message}&#10;            &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot;&gt;&lt;/button&gt;&#10;        `;&#10;&#10;        // Insert after the buttons&#10;        const buttonsContainer = document.querySelector('.d-grid');&#10;        if (buttonsContainer) {&#10;            buttonsContainer.parentNode.insertBefore(alertDiv, buttonsContainer.nextSibling);&#10;        }&#10;&#10;        // Auto-remove success alerts after 5 seconds&#10;        if (type === 'success') {&#10;            setTimeout(() =&gt; {&#10;                if (alertDiv &amp;&amp; alertDiv.parentNode) {&#10;                    alertDiv.remove();&#10;                }&#10;            }, 5000);&#10;        }&#10;    }&#10;&#10;    showComplexityAnalysis() {&#10;        document.getElementById('showComplexityBtn').classList.add('active');&#10;        document.getElementById('showPerformanceBtn').classList.remove('active');&#10;        document.getElementById('complexityDisplay').style.display = 'block';&#10;        document.getElementById('performanceDisplay').style.display = 'none';&#10;        // Refresh chart now that it's visible&#10;        this.updateMiniComplexityChart();&#10;    }&#10;&#10;    showPerformanceMetrics() {&#10;        // Toggle active state&#10;        document.getElementById('showPerformanceBtn').classList.add('active');&#10;        document.getElementById('showComplexityBtn').classList.remove('active');&#10;&#10;        // Show performance display, hide complexity&#10;        document.getElementById('performanceDisplay').style.display = 'block';&#10;        document.getElementById('complexityDisplay').style.display = 'none';&#10;    }&#10;&#10;    recordNodeHistory(algo, value) {&#10;        if (!value || !this.nodeHistory[algo]) return;&#10;        this.nodeHistory[algo].push(value);&#10;        if (this.nodeHistory[algo].length &gt; this.maxHistory) {&#10;            this.nodeHistory[algo].shift();&#10;        }&#10;    }&#10;&#10;    updateMiniComplexityChart() {&#10;        const groups = document.querySelectorAll('.mini-bar-group');&#10;        if (!groups.length) return;&#10;&#10;        const dj = [...this.nodeHistory.dijkstra];&#10;        const as = [...this.nodeHistory.astar];&#10;        if (dj.length === 0 &amp;&amp; as.length === 0) return;&#10;&#10;        const allVals = dj.concat(as).filter(v =&gt; typeof v === 'number' &amp;&amp; !isNaN(v));&#10;        if (!allVals.length) return;&#10;        const maxAll = Math.max(...allVals);&#10;        const minAll = Math.min(...allVals);&#10;        const rangeAll = maxAll - minAll;&#10;&#10;        // Reverse for latest first&#10;        const djRev = dj.slice(-this.maxHistory).reverse();&#10;        const asRev = as.slice(-this.maxHistory).reverse();&#10;&#10;        // Precompute fallback heights if all values identical&#10;        const identical = rangeAll === 0;&#10;        const fallbackHeights = [70, 55, 40]; // for latest, -1, -2&#10;&#10;        const computeHeight = (val, idx) =&gt; {&#10;            if (val === undefined) return 0;&#10;            if (identical) return fallbackHeights[idx] || 35; // visually distinct even if same&#10;            const normalized = (val - minAll) / rangeAll; // 0..1&#10;            // Emphasize differences using sqrt curve then map to 25%-100%&#10;            const curved = Math.sqrt(normalized);&#10;            return 25 + curved * 75;&#10;        };&#10;&#10;        groups.forEach((group, idx) =&gt; {&#10;            const dBar = group.querySelector('.mini-bar.dijkstra-mini');&#10;            const aBar = group.querySelector('.mini-bar.astar-mini');&#10;            const dVal = djRev[idx];&#10;            const aVal = asRev[idx];&#10;&#10;            const dHeight = computeHeight(dVal, idx);&#10;            const aHeight = computeHeight(aVal, idx);&#10;&#10;            if (dBar) {&#10;                dBar.style.height = dVal !== undefined ? dHeight.toFixed(1) + '%' : '0%';&#10;                dBar.title = dVal !== undefined ? `Dijkstra nodes: ${dVal}` : 'No data';&#10;            }&#10;            if (aBar) {&#10;                aBar.style.height = aVal !== undefined ? aHeight.toFixed(1) + '%' : '0%';&#10;                aBar.title = aVal !== undefined ? `A* nodes: ${aVal}` : 'No data';&#10;            }&#10;&#10;            const label = group.querySelector('.bar-label');&#10;            if (label) {&#10;                if (dVal !== undefined || aVal !== undefined) {&#10;                    label.textContent = idx === 0 ? 'Latest' : `Run -${idx}`;&#10;                } else {&#10;                    label.textContent = '—';&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    updateComparisonPerformance(result) {&#10;        // Update performance metrics for comparison&#10;        const dijkstra = result.dijkstra;&#10;        const astar = result.astar;&#10;        const comparison = result.comparison;&#10;&#10;        // Show comparison in performance display&#10;        const insightsDiv = document.getElementById('performanceInsights');&#10;        insightsDiv.innerHTML = `&#10;            &lt;div class=&quot;insight-item&quot;&gt;&lt;strong&gt;Comparison Results:&lt;/strong&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;insight-item&quot;&gt;Faster: ${comparison.faster_algorithm}&lt;/div&gt;&#10;            &lt;div class=&quot;insight-item&quot;&gt;Shorter: ${comparison.shorter_path}&lt;/div&gt;&#10;            &lt;div class=&quot;insight-item&quot;&gt;Time diff: ${comparison.time_difference.toFixed(2)}ms&lt;/div&gt;&#10;        `;&#10;&#10;        // Update metrics with comparison data&#10;        document.getElementById('lastRouteAlgorithm').textContent = 'Comparison';&#10;        document.getElementById('lastExecutionTime').textContent = `D:${dijkstra.execution_time.toFixed(1)}ms / A*:${astar.execution_time.toFixed(1)}ms`;&#10;        document.getElementById('lastNodesExplored').textContent = `${dijkstra.nodes_explored} / ${astar.nodes_explored}`;&#10;&#10;        // Calculate efficiency ratios&#10;        const dijkstraEfficiency = dijkstra.performance_analysis?.complexity_analysis?.efficiency_ratio || 0;&#10;        const astarEfficiency = astar.performance_analysis?.complexity_analysis?.efficiency_ratio || 0;&#10;        document.getElementById('lastEfficiency').textContent = `${dijkstraEfficiency.toFixed(1)}% / ${astarEfficiency.toFixed(1)}%`;&#10;&#10;        // After updating metrics also update chart (already handled after recording, keep in case order changes)&#10;        this.updateMiniComplexityChart();&#10;    }&#10;&#10;    updatePerformanceDisplay(result) {&#10;        // Update performance metrics from route result&#10;        if (result.performance_analysis) {&#10;            const analysis = result.performance_analysis.complexity_analysis;&#10;&#10;            document.getElementById('lastRouteAlgorithm').textContent = result.algorithm;&#10;            document.getElementById('lastExecutionTime').textContent = `${analysis.execution_time_ms.toFixed(2)}ms`;&#10;            document.getElementById('lastNodesExplored').textContent = analysis.nodes_explored;&#10;            document.getElementById('lastEfficiency').textContent = `${analysis.efficiency_ratio.toFixed(1)}%`;&#10;&#10;            // Update insights&#10;            const insights = analysis.performance_insights;&#10;            const insightsDiv = document.getElementById('performanceInsights');&#10;&#10;            if (insights &amp;&amp; insights.length &gt; 0) {&#10;                let insightsHtml = '';&#10;                insights.slice(0, 2).forEach(insight =&gt; {&#10;                    insightsHtml += `&lt;div class=&quot;insight-item&quot;&gt;${insight}&lt;/div&gt;`;&#10;                });&#10;                insightsDiv.innerHTML = insightsHtml;&#10;            }&#10;        }&#10;&#10;        // Keep chart fresh after single result updates&#10;        this.updateMiniComplexityChart();&#10;    }&#10;}&#10;&#10;// Initialize algorithm manager when DOM is loaded&#10;document.addEventListener('DOMContentLoaded', () =&gt; {&#10;    window.algorithmManager = new AlgorithmManager();&#10;&#10;    // Only trigger default view if buttons exist&#10;    const complexityBtn = document.getElementById('showComplexityBtn');&#10;    if (complexityBtn) {&#10;        complexityBtn.click();&#10;    }&#10;});&#10;" />
              <option name="updatedContent" value="// Algorithm execution and visualization functionality for real map routing&#10;class AlgorithmManager {&#10;    constructor() {&#10;        this.currentResults = null;&#10;        this.noControls = false; // flag if controls are absent&#10;&#10;        this.nodeHistory = { dijkstra: [], astar: [] }; // store last 3 node counts per algorithm&#10;        this.maxHistory = 3;&#10;&#10;        this.metricHistories = {&#10;            dijkstra: { nodes_explored: [], edges_relaxed: [], heuristic_calls: [], priority_queue_operations: [] },&#10;            astar: { nodes_explored: [], edges_relaxed: [], heuristic_calls: [], priority_queue_operations: [] }&#10;        };&#10;        this.currentMetric = 'nodes_explored';&#10;&#10;        this.setupEventListeners();&#10;    }&#10;&#10;    setupEventListeners() {&#10;        // Find path button (may not exist in fullscreen minimal mode)&#10;        const findBtn = document.getElementById('findPathBtn');&#10;        if (findBtn) {&#10;            findBtn.addEventListener('click', () =&gt; {&#10;                this.findPath();&#10;            });&#10;        } else {&#10;            this.noControls = true;&#10;        }&#10;&#10;        // Clear selection button&#10;        const clearBtn = document.getElementById('clearSelectionBtn');&#10;        if (clearBtn) {&#10;            clearBtn.addEventListener('click', () =&gt; {&#10;                if (window.leafletMap) {&#10;                    window.leafletMap.clearSelection();&#10;                    window.leafletMap.updateUI();&#10;                }&#10;            });&#10;        }&#10;&#10;        // Complexity / performance buttons&#10;        const complexityBtn = document.getElementById('showComplexityBtn');&#10;        const performanceBtn = document.getElementById('showPerformanceBtn');&#10;        if (complexityBtn) {&#10;            complexityBtn.addEventListener('click', () =&gt; {&#10;                this.showComplexityAnalysis();&#10;            });&#10;        }&#10;        if (performanceBtn) {&#10;            performanceBtn.addEventListener('click', () =&gt; {&#10;                this.showPerformanceMetrics();&#10;            });&#10;        }&#10;&#10;        // Metric selector for complexity chart&#10;        const metricSelect = document.getElementById('complexityMetricSelect');&#10;        if (metricSelect) {&#10;            metricSelect.addEventListener('change', (e) =&gt; {&#10;                this.currentMetric = e.target.value;&#10;                this.updateMiniChartTitle();&#10;                this.updateMiniComplexityChart();&#10;            });&#10;        }&#10;    }&#10;&#10;    updateMiniChartTitle() {&#10;        const titleEl = document.getElementById('miniChartTitle');&#10;        if (!titleEl) return;&#10;        const map = {&#10;            nodes_explored: 'Node Exploration (last 3 runs)',&#10;            edges_relaxed: 'Edges Relaxed (Dijkstra)',&#10;            heuristic_calls: 'Heuristic Calls (A*)',&#10;            priority_queue_operations: 'Priority Queue Ops'&#10;        };&#10;        titleEl.textContent = map[this.currentMetric] || 'Metric';&#10;    }&#10;&#10;    async findPath() {&#10;        if (!window.leafletMap || !window.leafletMap.isInitialized) {&#10;            this.showError('Map is still loading. Please wait a moment and try again.');&#10;            return;&#10;        }&#10;&#10;        if (!window.leafletMap.selectedStart || !window.leafletMap.selectedEnd) {&#10;            this.showError('Please select start and end points by clicking on the map');&#10;            return;&#10;        }&#10;&#10;        this.showLoading(true);&#10;&#10;        try {&#10;            const algoSelect = document.getElementById('algorithmSelect');&#10;            const algorithm = algoSelect ? algoSelect.value : 'dijkstra';&#10;&#10;            if (algorithm === 'compare') {&#10;                await this.compareRoutes();&#10;            } else {&#10;                await this.findSingleRoute(algorithm);&#10;            }&#10;&#10;        } catch (error) {&#10;            console.error('Error finding path:', error);&#10;            this.showError('Failed to find route: ' + error.message);&#10;        } finally {&#10;            this.showLoading(false);&#10;        }&#10;    }&#10;&#10;    async findSingleRoute(algorithm) {&#10;        const requestData = {&#10;            start: window.leafletMap.selectedStart,&#10;            end: window.leafletMap.selectedEnd,&#10;            algorithm: algorithm,&#10;            use_real_streets: true&#10;        };&#10;&#10;        const response = await fetch('/api/find-route', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify(requestData)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (result.error) {&#10;            throw new Error(result.error);&#10;        }&#10;&#10;        this.currentResults = result;&#10;&#10;        this.recordMetricHistory(result);&#10;        this.updateMiniComplexityChart();&#10;&#10;        // Record node exploration history&#10;        this.recordNodeHistory(result.algorithm, result.nodes_explored || (result.performance_analysis?.complexity_analysis?.nodes_explored));&#10;        this.updateMiniComplexityChart();&#10;&#10;        // Display the route on the map&#10;        if (window.leafletMap &amp;&amp; window.leafletMap.displayRoute) {&#10;            window.leafletMap.displayRoute(result);&#10;        }&#10;&#10;        // Update performance display with real data&#10;        this.updatePerformanceDisplay(result);&#10;&#10;        // Show success message with route details&#10;        this.showSuccess(&#10;            `Route found using ${result.algorithm}! ` +&#10;            `Distance: ${result.total_distance} km, ` +&#10;            `Duration: ${result.duration_minutes} minutes`&#10;        );&#10;    }&#10;&#10;    async compareRoutes() {&#10;        const requestData = {&#10;            start: window.leafletMap.selectedStart,&#10;            end: window.leafletMap.selectedEnd,&#10;            algorithm: 'compare',&#10;            use_real_streets: true&#10;        };&#10;&#10;        const response = await fetch('/api/find-route', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify(requestData)&#10;        });&#10;&#10;        if (!response.ok) {&#10;            throw new Error(`HTTP error! status: ${response.status}`);&#10;        }&#10;&#10;        const result = await response.json();&#10;&#10;        if (result.error) {&#10;            throw new Error(result.error);&#10;        }&#10;&#10;        this.currentResults = result;&#10;&#10;        this.recordMetricHistory(result.dijkstra);&#10;        this.recordMetricHistory(result.astar);&#10;        this.updateMiniComplexityChart();&#10;&#10;        // Record both algorithms' node counts&#10;        this.recordNodeHistory('dijkstra', result.dijkstra.nodes_explored || (result.dijkstra.performance_analysis?.complexity_analysis?.nodes_explored));&#10;        this.recordNodeHistory('astar', result.astar.nodes_explored || (result.astar.performance_analysis?.complexity_analysis?.nodes_explored));&#10;        this.updateMiniComplexityChart();&#10;&#10;        // Display comparison routes on the map&#10;        if (window.leafletMap &amp;&amp; window.leafletMap.displayComparison) {&#10;            window.leafletMap.displayComparison(result.dijkstra, result.astar);&#10;        }&#10;&#10;        // Update performance display with comparison data&#10;        this.updateComparisonPerformance(result);&#10;&#10;        // Show comparison details&#10;        const comparison = result.comparison;&#10;        const dijkstra = result.dijkstra;&#10;        const astar = result.astar;&#10;&#10;        let message = `Route comparison completed!&lt;br&gt;`;&#10;        message += `&lt;strong&gt;Dijkstra:&lt;/strong&gt; ${dijkstra.total_distance}km, ${dijkstra.duration_minutes}min, ${dijkstra.nodes_explored} nodes&lt;br&gt;`;&#10;        message += `&lt;strong&gt;A*:&lt;/strong&gt; ${astar.total_distance}km, ${astar.duration_minutes}min, ${astar.nodes_explored} nodes&lt;br&gt;`;&#10;        message += `&lt;strong&gt;Faster algorithm:&lt;/strong&gt; ${comparison.faster_algorithm}&lt;br&gt;`;&#10;        message += `&lt;strong&gt;Shorter path:&lt;/strong&gt; ${comparison.shorter_path}`;&#10;&#10;        this.showSuccess(message);&#10;    }&#10;&#10;    showLoading(show) {&#10;        const btn = document.getElementById('findPathBtn');&#10;        if (show) {&#10;            btn.innerHTML = '&lt;span class=&quot;spinner-border spinner-border-sm me-2&quot;&gt;&lt;/span&gt;Computing Route...';&#10;            btn.disabled = true;&#10;        } else {&#10;            btn.innerHTML = 'Find Route';&#10;            btn.disabled = !(window.leafletMap &amp;&amp; window.leafletMap.hasValidSelection());&#10;        }&#10;    }&#10;&#10;    showSuccess(message) {&#10;        this.showAlert(message, 'success');&#10;    }&#10;&#10;    showError(message) {&#10;        this.showAlert(message, 'danger');&#10;    }&#10;&#10;    showAlert(message, type) {&#10;        // Remove existing alerts&#10;        const existingAlerts = document.querySelectorAll('.alert-custom');&#10;        existingAlerts.forEach(alert =&gt; alert.remove());&#10;&#10;        // Create new alert&#10;        const alertDiv = document.createElement('div');&#10;        alertDiv.className = `alert alert-${type} alert-dismissible fade show alert-custom mt-3`;&#10;        alertDiv.innerHTML = `&#10;            ${message}&#10;            &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot;&gt;&lt;/button&gt;&#10;        `;&#10;&#10;        // Insert after the buttons&#10;        const buttonsContainer = document.querySelector('.d-grid');&#10;        if (buttonsContainer) {&#10;            buttonsContainer.parentNode.insertBefore(alertDiv, buttonsContainer.nextSibling);&#10;        }&#10;&#10;        // Auto-remove success alerts after 5 seconds&#10;        if (type === 'success') {&#10;            setTimeout(() =&gt; {&#10;                if (alertDiv &amp;&amp; alertDiv.parentNode) {&#10;                    alertDiv.remove();&#10;                }&#10;            }, 5000);&#10;        }&#10;    }&#10;&#10;    showComplexityAnalysis() {&#10;        document.getElementById('showComplexityBtn').classList.add('active');&#10;        document.getElementById('showPerformanceBtn').classList.remove('active');&#10;        document.getElementById('complexityDisplay').style.display = 'block';&#10;        document.getElementById('performanceDisplay').style.display = 'none';&#10;        // Refresh chart now that it's visible&#10;        this.updateMiniComplexityChart();&#10;    }&#10;&#10;    showPerformanceMetrics() {&#10;        // Toggle active state&#10;        document.getElementById('showPerformanceBtn').classList.add('active');&#10;        document.getElementById('showComplexityBtn').classList.remove('active');&#10;&#10;        // Show performance display, hide complexity&#10;        document.getElementById('performanceDisplay').style.display = 'block';&#10;        document.getElementById('complexityDisplay').style.display = 'none';&#10;    }&#10;&#10;    recordNodeHistory(algo, value) {&#10;        if (!value || !this.nodeHistory[algo]) return;&#10;        this.nodeHistory[algo].push(value);&#10;        if (this.nodeHistory[algo].length &gt; this.maxHistory) {&#10;            this.nodeHistory[algo].shift();&#10;        }&#10;    }&#10;&#10;    recordMetricHistory(result) {&#10;        if (!result || !result.algorithm) return;&#10;        const algo = result.algorithm === 'astar' ? 'astar' : 'dijkstra';&#10;        const perf = result.performance_analysis?.complexity_analysis || {};&#10;        const detailed = result.performance_analysis?.detailed_metrics || {};&#10;        const snapshot = {&#10;            nodes_explored: perf.nodes_explored ?? result.nodes_explored ?? 0,&#10;            edges_relaxed: detailed.edges_relaxed ?? perf.edges_relaxed ?? 0,&#10;            heuristic_calls: detailed.heuristic_calls ?? perf.heuristic_calls ?? 0,&#10;            priority_queue_operations: detailed.priority_queue_operations ?? perf.priority_queue_operations ?? 0&#10;        };&#10;        Object.entries(snapshot).forEach(([metric, value]) =&gt; {&#10;            const arr = this.metricHistories[algo][metric];&#10;            arr.push(value || 0);&#10;            if (arr.length &gt; this.maxHistory) arr.shift();&#10;        });&#10;    }&#10;&#10;    updateMiniComplexityChart() {&#10;        const groups = document.querySelectorAll('.mini-bar-group');&#10;        if (!groups.length) return;&#10;        const metric = this.currentMetric;&#10;        const djVals = [...this.metricHistories.dijkstra[metric]];&#10;        const asVals = [...this.metricHistories.astar[metric]];&#10;        // If both empty, nothing to show&#10;        if (djVals.length === 0 &amp;&amp; asVals.length === 0) return;&#10;&#10;        const djRev = djVals.slice(-this.maxHistory).reverse();&#10;        const asRev = asVals.slice(-this.maxHistory).reverse();&#10;        const all = djRev.concat(asRev).filter(v =&gt; typeof v === 'number');&#10;        if (!all.length) return;&#10;        const maxAll = Math.max(...all);&#10;        const minAll = Math.min(...all);&#10;        const range = maxAll - minAll;&#10;        const identical = range === 0;&#10;        const fallbackHeights = [70, 55, 40];&#10;        const computeHeight = (val, idx) =&gt; {&#10;            if (val === undefined) return 0;&#10;            if (identical) return fallbackHeights[idx] || 35;&#10;            const norm = (val - minAll) / (range || 1);&#10;            const curved = Math.sqrt(norm);&#10;            return 25 + curved * 75;&#10;        };&#10;        groups.forEach((group, idx) =&gt; {&#10;            const dBar = group.querySelector('.mini-bar.dijkstra-mini');&#10;            const aBar = group.querySelector('.mini-bar.astar-mini');&#10;            const dVal = djRev[idx];&#10;            const aVal = asRev[idx];&#10;            const dH = computeHeight(dVal, idx);&#10;            const aH = computeHeight(aVal, idx);&#10;            if (dBar) {&#10;                dBar.style.height = dVal !== undefined ? dH.toFixed(1) + '%' : '0%';&#10;                dBar.title = dVal !== undefined ? `Dijkstra ${metric}: ${dVal}` : 'No data';&#10;                dBar.style.opacity = (metric === 'heuristic_calls') ? 0.25 : 1; // dim metric not relevant&#10;            }&#10;            if (aBar) {&#10;                aBar.style.height = aVal !== undefined ? aH.toFixed(1) + '%' : '0%';&#10;                aBar.title = aVal !== undefined ? `A* ${metric}: ${aVal}` : 'No data';&#10;                aBar.style.opacity = (metric === 'edges_relaxed') ? 0.25 : 1;&#10;            }&#10;            const label = group.querySelector('.bar-label');&#10;            if (label) {&#10;                if (dVal !== undefined || aVal !== undefined) label.textContent = idx === 0 ? 'Latest' : `Run -${idx}`; else label.textContent = '—';&#10;            }&#10;        });&#10;    }&#10;&#10;    updateComparisonPerformance(result) {&#10;        // Update performance metrics for comparison&#10;        const dijkstra = result.dijkstra;&#10;        const astar = result.astar;&#10;        const comparison = result.comparison;&#10;&#10;        // Show comparison in performance display&#10;        const insightsDiv = document.getElementById('performanceInsights');&#10;        insightsDiv.innerHTML = `&#10;            &lt;div class=&quot;insight-item&quot;&gt;&lt;strong&gt;Comparison Results:&lt;/strong&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;insight-item&quot;&gt;Faster: ${comparison.faster_algorithm}&lt;/div&gt;&#10;            &lt;div class=&quot;insight-item&quot;&gt;Shorter: ${comparison.shorter_path}&lt;/div&gt;&#10;            &lt;div class=&quot;insight-item&quot;&gt;Time diff: ${comparison.time_difference.toFixed(2)}ms&lt;/div&gt;&#10;        `;&#10;&#10;        // Update metrics with comparison data&#10;        document.getElementById('lastRouteAlgorithm').textContent = 'Comparison';&#10;        document.getElementById('lastExecutionTime').textContent = `D:${dijkstra.execution_time.toFixed(1)}ms / A*:${astar.execution_time.toFixed(1)}ms`;&#10;        document.getElementById('lastNodesExplored').textContent = `${dijkstra.nodes_explored} / ${astar.nodes_explored}`;&#10;&#10;        // Calculate efficiency ratios&#10;        const dijkstraEfficiency = dijkstra.performance_analysis?.complexity_analysis?.efficiency_ratio || 0;&#10;        const astarEfficiency = astar.performance_analysis?.complexity_analysis?.efficiency_ratio || 0;&#10;        document.getElementById('lastEfficiency').textContent = `${dijkstraEfficiency.toFixed(1)}% / ${astarEfficiency.toFixed(1)}%`;&#10;&#10;        // After updating metrics also update chart (already handled after recording, keep in case order changes)&#10;        this.updateMiniComplexityChart();&#10;    }&#10;&#10;    updatePerformanceDisplay(result) {&#10;        // Update performance metrics from route result&#10;        if (result.performance_analysis) {&#10;            const analysis = result.performance_analysis.complexity_analysis;&#10;&#10;            document.getElementById('lastRouteAlgorithm').textContent = result.algorithm;&#10;            document.getElementById('lastExecutionTime').textContent = `${analysis.execution_time_ms.toFixed(2)}ms`;&#10;            document.getElementById('lastNodesExplored').textContent = analysis.nodes_explored;&#10;            document.getElementById('lastEfficiency').textContent = `${analysis.efficiency_ratio.toFixed(1)}%`;&#10;&#10;            // Update insights&#10;            const insights = analysis.performance_insights;&#10;            const insightsDiv = document.getElementById('performanceInsights');&#10;&#10;            if (insights &amp;&amp; insights.length &gt; 0) {&#10;                let insightsHtml = '';&#10;                insights.slice(0, 2).forEach(insight =&gt; {&#10;                    insightsHtml += `&lt;div class=&quot;insight-item&quot;&gt;${insight}&lt;/div&gt;`;&#10;                });&#10;                insightsDiv.innerHTML = insightsHtml;&#10;            }&#10;        }&#10;&#10;        // Keep chart fresh after single result updates&#10;        this.updateMiniComplexityChart();&#10;    }&#10;}&#10;&#10;// Initialize algorithm manager when DOM is loaded&#10;document.addEventListener('DOMContentLoaded', () =&gt; {&#10;    window.algorithmManager = new AlgorithmManager();&#10;&#10;    // Only trigger default view if buttons exist&#10;    const complexityBtn = document.getElementById('showComplexityBtn');&#10;    if (complexityBtn) {&#10;        complexityBtn.click();&#10;    }&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;PathFinder - Real Street Navigation&lt;/title&gt;&#10;&#10;    &lt;!-- Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&#10;    &lt;!-- Font Awesome for icons --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;&#10;    &lt;!-- Leaflet CSS --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.9.4/dist/leaflet.css&quot; /&gt;&#10;&#10;    &lt;!-- Custom CSS --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container-fluid&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;!-- Control Panel --&gt;&#10;            &lt;div class=&quot;col-md-3 p-3&quot;&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5&gt;PathFinder&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;!-- Instructions --&gt;&#10;                        &lt;div class=&quot;alert alert-info small mb-3&quot;&gt;&#10;                            &lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;&#10;                            1. Click on the map to set start point&lt;br&gt;&#10;                            2. Click again to set end point&lt;br&gt;&#10;                            3. Choose algorithm and click &quot;Find Route&quot;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Algorithm Selection --&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;algorithmSelect&quot; class=&quot;form-label&quot;&gt;Pathfinding Algorithm&lt;/label&gt;&#10;                            &lt;select class=&quot;form-select&quot; id=&quot;algorithmSelect&quot;&gt;&#10;                                &lt;option value=&quot;dijkstra&quot;&gt;Dijkstra's Algorithm&lt;/option&gt;&#10;                                &lt;option value=&quot;astar&quot;&gt;A* Algorithm&lt;/option&gt;&#10;                                &lt;option value=&quot;compare&quot;&gt;Compare Dijkstra vs A*&lt;/option&gt;&#10;                            &lt;/select&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Action Buttons --&gt;&#10;                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                            &lt;button id=&quot;findPathBtn&quot; class=&quot;btn btn-primary&quot; disabled&gt;Find Route&lt;/button&gt;&#10;                            &lt;button id=&quot;clearSelectionBtn&quot; class=&quot;btn btn-secondary&quot;&gt;Clear Selection&lt;/button&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Selection Status --&gt;&#10;                        &lt;div class=&quot;mt-3&quot;&gt;&#10;                            &lt;h6&gt;Selection Status&lt;/h6&gt;&#10;                            &lt;div id=&quot;selectionStatus&quot; class=&quot;small&quot;&gt;&#10;                                &lt;span class=&quot;text-muted&quot;&gt;○ Click map to set start point&lt;/span&gt;&lt;br&gt;&#10;                                &lt;span class=&quot;text-muted&quot;&gt;○ Click map to set end point&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Route Information --&gt;&#10;                        &lt;div class=&quot;mt-3&quot; id=&quot;routeInfo&quot; style=&quot;display: none;&quot;&gt;&#10;                            &lt;h6&gt;Route Information&lt;/h6&gt;&#10;                            &lt;div id=&quot;routeDetails&quot; class=&quot;small&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Complexity Analysis Section --&gt;&#10;                        &lt;div class=&quot;mt-3&quot;&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                                    &lt;h6 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-chart-line&quot;&gt;&lt;/i&gt; Algorithm Analysis&lt;/h6&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                    &lt;div class=&quot;btn-group w-100 mb-2&quot; role=&quot;group&quot;&gt;&#10;                                        &lt;button id=&quot;showComplexityBtn&quot; class=&quot;btn btn-outline-primary btn-sm&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-brain&quot;&gt;&lt;/i&gt; Complexity&#10;                                        &lt;/button&gt;&#10;                                        &lt;button id=&quot;showPerformanceBtn&quot; class=&quot;btn btn-outline-info btn-sm&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-tachometer-alt&quot;&gt;&lt;/i&gt; Performance&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Complexity Analysis Display --&gt;&#10;                                    &lt;div id=&quot;complexityDisplay&quot; style=&quot;display: none;&quot;&gt;&#10;                                        &lt;div class=&quot;complexity-summary mb-2&quot;&gt;&#10;                                            &lt;div class=&quot;algorithm-complexity&quot;&gt;&#10;                                                &lt;div class=&quot;complexity-item dijkstra-item&quot;&gt;&#10;                                                    &lt;span class=&quot;algorithm-name&quot;&gt;Dijkstra&lt;/span&gt;&#10;                                                    &lt;span class=&quot;complexity-formula&quot;&gt;O((V+E) log V)&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;complexity-item astar-item&quot;&gt;&#10;                                                    &lt;span class=&quot;algorithm-name&quot;&gt;A*&lt;/span&gt;&#10;                                                    &lt;span class=&quot;complexity-formula&quot;&gt;O(b^d)&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;mini-chart&quot; id=&quot;miniComplexityChart&quot;&gt;&#10;                                            &lt;div class=&quot;chart-title&quot;&gt;Node Exploration Efficiency&lt;/div&gt;&#10;                                            &lt;div class=&quot;mini-bars&quot;&gt;&#10;                                                &lt;div class=&quot;mini-bar-group&quot; data-group=&quot;1&quot;&gt;&#10;                                                    &lt;div class=&quot;mini-bar dijkstra-mini&quot; data-algo=&quot;dijkstra&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;mini-bar astar-mini&quot; data-algo=&quot;astar&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;bar-label&quot;&gt;Sample 1&lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;mini-bar-group&quot; data-group=&quot;2&quot;&gt;&#10;                                                    &lt;div class=&quot;mini-bar dijkstra-mini&quot; data-algo=&quot;dijkstra&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;mini-bar astar-mini&quot; data-algo=&quot;astar&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;bar-label&quot;&gt;Sample 2&lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;mini-bar-group&quot; data-group=&quot;3&quot;&gt;&#10;                                                    &lt;div class=&quot;mini-bar dijkstra-mini&quot; data-algo=&quot;dijkstra&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;mini-bar astar-mini&quot; data-algo=&quot;astar&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;bar-label&quot;&gt;Sample 3&lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;mini-legend&quot;&gt;&#10;                                                &lt;span&gt;&lt;span class=&quot;legend-dot dijkstra-dot&quot;&gt;&lt;/span&gt;Dijkstra&lt;/span&gt;&#10;                                                &lt;span&gt;&lt;span class=&quot;legend-dot astar-dot&quot;&gt;&lt;/span&gt;A*&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Performance Display --&gt;&#10;                                    &lt;div id=&quot;performanceDisplay&quot; style=&quot;display: none;&quot;&gt;&#10;                                        &lt;div id=&quot;performanceMetrics&quot;&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Last Route:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastRouteAlgorithm&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Execution Time:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastExecutionTime&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Nodes Explored:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastNodesExplored&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Efficiency:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastEfficiency&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;performance-insights mt-2&quot; id=&quot;performanceInsights&quot;&gt;&#10;                                            &lt;small class=&quot;text-muted&quot;&gt;Run a route to see performance analysis&lt;/small&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Map Container --&gt;&#10;            &lt;div class=&quot;col-md-9 p-0&quot;&gt;&#10;                &lt;div id=&quot;map&quot; style=&quot;height: 100vh; width: 100%;&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Leaflet JS --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/leaflet@1.9.4/dist/leaflet.js&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Custom JS --&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/leaflet_map.js') }}&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/algorithms.js') }}&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;PathFinder - Real Street Navigation&lt;/title&gt;&#10;&#10;    &lt;!-- Bootstrap CSS --&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;&#10;    &lt;!-- Font Awesome for icons --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;&#10;    &lt;!-- Leaflet CSS --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.9.4/dist/leaflet.css&quot; /&gt;&#10;&#10;    &lt;!-- Custom CSS --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='css/style.css') }}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container-fluid&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;!-- Control Panel --&gt;&#10;            &lt;div class=&quot;col-md-3 p-3&quot;&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5&gt;PathFinder&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;!-- Instructions --&gt;&#10;                        &lt;div class=&quot;alert alert-info small mb-3&quot;&gt;&#10;                            &lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;&#10;                            1. Click on the map to set start point&lt;br&gt;&#10;                            2. Click again to set end point&lt;br&gt;&#10;                            3. Choose algorithm and click &quot;Find Route&quot;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Algorithm Selection --&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;algorithmSelect&quot; class=&quot;form-label&quot;&gt;Pathfinding Algorithm&lt;/label&gt;&#10;                            &lt;select class=&quot;form-select&quot; id=&quot;algorithmSelect&quot;&gt;&#10;                                &lt;option value=&quot;dijkstra&quot;&gt;Dijkstra's Algorithm&lt;/option&gt;&#10;                                &lt;option value=&quot;astar&quot;&gt;A* Algorithm&lt;/option&gt;&#10;                                &lt;option value=&quot;compare&quot;&gt;Compare Dijkstra vs A*&lt;/option&gt;&#10;                            &lt;/select&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Action Buttons --&gt;&#10;                        &lt;div class=&quot;d-grid gap-2&quot;&gt;&#10;                            &lt;button id=&quot;findPathBtn&quot; class=&quot;btn btn-primary&quot; disabled&gt;Find Route&lt;/button&gt;&#10;                            &lt;button id=&quot;clearSelectionBtn&quot; class=&quot;btn btn-secondary&quot;&gt;Clear Selection&lt;/button&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Selection Status --&gt;&#10;                        &lt;div class=&quot;mt-3&quot;&gt;&#10;                            &lt;h6&gt;Selection Status&lt;/h6&gt;&#10;                            &lt;div id=&quot;selectionStatus&quot; class=&quot;small&quot;&gt;&#10;                                &lt;span class=&quot;text-muted&quot;&gt;○ Click map to set start point&lt;/span&gt;&lt;br&gt;&#10;                                &lt;span class=&quot;text-muted&quot;&gt;○ Click map to set end point&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Route Information --&gt;&#10;                        &lt;div class=&quot;mt-3&quot; id=&quot;routeInfo&quot; style=&quot;display: none;&quot;&gt;&#10;                            &lt;h6&gt;Route Information&lt;/h6&gt;&#10;                            &lt;div id=&quot;routeDetails&quot; class=&quot;small&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;!-- Complexity Analysis Section --&gt;&#10;                        &lt;div class=&quot;mt-3&quot;&gt;&#10;                            &lt;div class=&quot;card&quot;&gt;&#10;                                &lt;div class=&quot;card-header bg-primary text-white&quot;&gt;&#10;                                    &lt;h6 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-chart-line&quot;&gt;&lt;/i&gt; Algorithm Analysis&lt;/h6&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;card-body p-2&quot;&gt;&#10;                                    &lt;div class=&quot;btn-group w-100 mb-2&quot; role=&quot;group&quot;&gt;&#10;                                        &lt;button id=&quot;showComplexityBtn&quot; class=&quot;btn btn-outline-primary btn-sm&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-brain&quot;&gt;&lt;/i&gt; Complexity&#10;                                        &lt;/button&gt;&#10;                                        &lt;button id=&quot;showPerformanceBtn&quot; class=&quot;btn btn-outline-info btn-sm&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-tachometer-alt&quot;&gt;&lt;/i&gt; Performance&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Complexity Analysis Display --&gt;&#10;                                    &lt;div id=&quot;complexityDisplay&quot; style=&quot;display: none;&quot;&gt;&#10;                                        &lt;div class=&quot;complexity-summary mb-2&quot;&gt;&#10;                                            &lt;div class=&quot;algorithm-complexity&quot;&gt;&#10;                                                &lt;div class=&quot;complexity-item dijkstra-item&quot;&gt;&#10;                                                    &lt;span class=&quot;algorithm-name&quot;&gt;Dijkstra&lt;/span&gt;&#10;                                                    &lt;span class=&quot;complexity-formula&quot;&gt;O((V+E) log V)&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;complexity-item astar-item&quot;&gt;&#10;                                                    &lt;span class=&quot;algorithm-name&quot;&gt;A*&lt;/span&gt;&#10;                                                    &lt;span class=&quot;complexity-formula&quot;&gt;O(b^d)&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;mb-2&quot;&gt;&#10;                                            &lt;label for=&quot;complexityMetricSelect&quot; class=&quot;form-label small mb-1&quot;&gt;Chart Metric&lt;/label&gt;&#10;                                            &lt;select id=&quot;complexityMetricSelect&quot; class=&quot;form-select form-select-sm&quot;&gt;&#10;                                                &lt;option value=&quot;nodes_explored&quot; selected&gt;Nodes Explored&lt;/option&gt;&#10;                                                &lt;option value=&quot;edges_relaxed&quot;&gt;Edges Relaxed (Dijkstra)&lt;/option&gt;&#10;                                                &lt;option value=&quot;heuristic_calls&quot;&gt;Heuristic Calls (A*)&lt;/option&gt;&#10;                                                &lt;option value=&quot;priority_queue_operations&quot;&gt;Priority Queue Ops&lt;/option&gt;&#10;                                            &lt;/select&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;mini-chart&quot; id=&quot;miniComplexityChart&quot;&gt;&#10;                                            &lt;div class=&quot;chart-title&quot; id=&quot;miniChartTitle&quot;&gt;Node Exploration Efficiency&lt;/div&gt;&#10;                                            &lt;div class=&quot;mini-bars&quot;&gt;&#10;                                                &lt;div class=&quot;mini-bar-group&quot; data-group=&quot;1&quot;&gt;&#10;                                                    &lt;div class=&quot;mini-bar dijkstra-mini&quot; data-algo=&quot;dijkstra&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;mini-bar astar-mini&quot; data-algo=&quot;astar&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;bar-label&quot;&gt;Sample 1&lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;mini-bar-group&quot; data-group=&quot;2&quot;&gt;&#10;                                                    &lt;div class=&quot;mini-bar dijkstra-mini&quot; data-algo=&quot;dijkstra&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;mini-bar astar-mini&quot; data-algo=&quot;astar&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;bar-label&quot;&gt;Sample 2&lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                                &lt;div class=&quot;mini-bar-group&quot; data-group=&quot;3&quot;&gt;&#10;                                                    &lt;div class=&quot;mini-bar dijkstra-mini&quot; data-algo=&quot;dijkstra&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;mini-bar astar-mini&quot; data-algo=&quot;astar&quot;&gt;&lt;/div&gt;&#10;                                                    &lt;div class=&quot;bar-label&quot;&gt;Sample 3&lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;mini-legend&quot;&gt;&#10;                                                &lt;span&gt;&lt;span class=&quot;legend-dot dijkstra-dot&quot;&gt;&lt;/span&gt;Dijkstra&lt;/span&gt;&#10;                                                &lt;span&gt;&lt;span class=&quot;legend-dot astar-dot&quot;&gt;&lt;/span&gt;A*&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;&#10;                                    &lt;!-- Performance Display --&gt;&#10;                                    &lt;div id=&quot;performanceDisplay&quot; style=&quot;display: none;&quot;&gt;&#10;                                        &lt;div id=&quot;performanceMetrics&quot;&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Last Route:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastRouteAlgorithm&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Execution Time:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastExecutionTime&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Nodes Explored:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastNodesExplored&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;div class=&quot;metric-row&quot;&gt;&#10;                                                &lt;span class=&quot;metric-label&quot;&gt;Efficiency:&lt;/span&gt;&#10;                                                &lt;span class=&quot;metric-value&quot; id=&quot;lastEfficiency&quot;&gt;-&lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        &lt;div class=&quot;performance-insights mt-2&quot; id=&quot;performanceInsights&quot;&gt;&#10;                                            &lt;small class=&quot;text-muted&quot;&gt;Run a route to see performance analysis&lt;/small&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Map Container --&gt;&#10;            &lt;div class=&quot;col-md-9 p-0&quot;&gt;&#10;                &lt;div id=&quot;map&quot; style=&quot;height: 100vh; width: 100%;&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Bootstrap JS --&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Leaflet JS --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/leaflet@1.9.4/dist/leaflet.js&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Custom JS --&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/leaflet_map.js') }}&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;{{ url_for('static', filename='js/algorithms.js') }}&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>